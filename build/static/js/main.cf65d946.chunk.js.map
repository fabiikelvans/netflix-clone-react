{"version":3,"sources":["logo.svg","axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","log","movieTrailer","tmdbId","id","apiKey","then","url","urlParams","URLSearchParams","URL","search","handleClick","src","poster_path","backdrop_path","alt","name","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorroMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf65d946.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\n\r\n/**  base url to make requests to the movie database */\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import { async } from 'q';\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport \"./Row.css\"\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\"\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n\r\n    // A snippet of code which runs based on a specific condition/variable\r\n\r\n    useEffect(() =>{\r\n        // if [], run once when the row loads, and don't run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars : {\r\n\r\n        autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }else {\r\n            console.log(movie);\r\n            movieTrailer(null, {\r\n                tmdbId: movie.id,\r\n                apiKey: \"775f39dee38429db40708b9791240798\",\r\n            }).then((url) => {\r\n                const urlParams = new URLSearchParams( new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* title */}\r\n            <h2>{title}</h2>\r\n        \r\n            <div className=\"row_posters\">\r\n                {/* row poster */}\r\n\r\n                {movies.map((movie) => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl &&<YouTube videoId={trailerUrl} opts={opts} />}\r\n\r\n            {/* container -> posters */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"775f39dee38429db40708b9791240798\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=123`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorroMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\"\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            )\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str; \r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\"\r\n        }}\r\n        >\r\n            \r\n            <div className=\"banner__contents\">\r\n               <h1 className=\"banner__title\">\r\n               {movie?.title || movie?.name || movie?.original_name}\r\n               </h1>\r\n               <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\"> Play </button>\r\n                <button className=\"banner__button\"> My List </button>\r\n               </div>\r\n\r\n               <h1 className=\"banner__description\">\r\n                   {truncate(movie?.overview, 150)}\r\n               </h1>\r\n            </div>\r\n\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState,useEffect }  from 'react'\r\nimport './Nav.css'\r\n\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow]  = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () =>{\r\n            if (window.scrollY > 100) {\r\n                handleShow(true)\r\n            }else handleShow(false);\r\n        });\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n            className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            alt=\"Netflix Logo\"\r\n            />\r\n\r\n            <img\r\n            className=\"nav__avatar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner'\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Nav/>\n      <Banner/>\n\n      <Row title=\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorroMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}